CODIGO A
#include <Arduino.h>


struct Button {
  const uint8_t PIN;
  uint32_t numberKeyPresses;
  bool pressed;
};


Button button1 = {20, 0, false};  
const int LED_PIN = 1;  // LED en GPIO 5


void IRAM_ATTR isr() {  
  button1.numberKeyPresses += 1;  
  button1.pressed = true;  
}


void setup() {
  Serial.begin(115200);
  pinMode(button1.PIN, INPUT_PULLUP); 
  pinMode(LED_PIN, OUTPUT);  
  attachInterrupt(button1.PIN, isr, FALLING);  
}


void loop() {
  if (button1.pressed) {  
    Serial.printf("Button 1 has been pressed %u times\n", button1.numberKeyPresses);
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));  
    button1.pressed = false;  
  }


  
  static uint32_t lastMillis = 0;
  if (millis() - lastMillis > 60000) {  
    lastMillis = millis();
    detachInterrupt(button1.PIN);
    Serial.println("Interrupt Detached!");
  }
}



CODIGO B
#include <Arduino.h>
volatile int interruptCounter;
int totalInterruptCounter;
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;


const int LED_PIN = 1;  
void IRAM_ATTR onTimer() {
  portENTER_CRITICAL_ISR(&timerMux);
  interruptCounter++;
  portEXIT_CRITICAL_ISR(&timerMux);
}

void setup() {
  Serial.begin(115200);
 
  pinMode(LED_PIN, OUTPUT); 
 
  timer = timerBegin(0, 80, true);  
  timerAttachInterrupt(timer, &onTimer, true);  
  timerAlarmWrite(timer, 1000000, true);  
  timerAlarmEnable(timer);  
}


void loop() {
  if (interruptCounter > 0) {
    portENTER_CRITICAL(&timerMux);
    interruptCounter--;
    portEXIT_CRITICAL(&timerMux);
   
    totalInterruptCounter++;
   
  
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));


    Serial.print("An interrupt has occurred. Total number: ");
    Serial.println(totalInterruptCounter);
  }
}









