// PRACTICA 6 

// EJERCICIO 1 

#include <SPI.h>
#include <SD.h>

// Prueba con estos pines alternativos:
#define CS_PIN    5   
#define SCK_PIN   12
#define MISO_PIN  13
#define MOSI_PIN  11

SPIClass spi = SPIClass(FSPI); 
File myFile;

void setup() {
  Serial.begin(115200);
  delay(2000);

  // Configura SPI con los pines
  spi.begin(SCK_PIN, MISO_PIN, MOSI_PIN, CS_PIN);

  Serial.print("Iniciando SD... ");
  
  // Intenta inicializar con velocidad reducida (1 MHz)
  if (!SD.begin(CS_PIN, spi, 1000000)) { 
    Serial.println("Fallo. Verifica:");
    Serial.println("- Pines y conexiones");
    Serial.println("- Formato FAT32");
    Serial.println("- Resistencia pull-up");
    while (1);
  }
  Serial.println("Correcto");

  // Leer archivo...
  myFile = SD.open("/myFile.txt");
  if (myFile) {
    Serial.println("Contenido:");
    while (myFile.available()) {
      Serial.write(myFile.read());
    }
    myFile.close();
  } else {
    Serial.println("Error abriendo archivo");
  }
}

void loop() {}  

// EJERCICIO 2 

#include <SPI.h>
#include <MFRC522.h>

// Pines SPI (ESP32-S3)
#define RFID_CS_PIN   5   // GPIO5
#define RST_PIN       4   // GPIO4

MFRC522 rfid(RFID_CS_PIN, RST_PIN); // Constructor

void setup() {
  Serial.begin(115200);
  delay(2000);

  // Inicializa SPI con pines personalizados para ESP32-S3:
  SPI.begin(12, 13, 11, RFID_CS_PIN); // SCK=12, MISO=13, MOSI=11, SS=5

  rfid.PCD_Init(); 
  Serial.println("Acerca una tarjeta RFID...");

}

void loop() {
  // Detecci√≥n mejorada
  if (!rfid.PICC_IsNewCardPresent()) {
    return; 
  }
  if (!rfid.PICC_ReadCardSerial()) {
    return;
  }

  // Mostrar UID
  Serial.print("UID:");
  for (byte i = 0; i < rfid.uid.size; i++) {
    Serial.print(rfid.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(rfid.uid.uidByte[i], HEX);
  }
  Serial.println();

  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();
} 














